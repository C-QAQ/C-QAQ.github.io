<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Algorithm Problem Solving</title>
    <url>/2022/02/20/Algorithm-Problem-Solving/</url>
    <content><![CDATA[<p><strong>简介</strong></p>
<blockquote>
<p>做题记录</p>
</blockquote>
<span id="more"></span>

<h1 id="AcWing"><a href="#AcWing" class="headerlink" title="AcWing"></a>AcWing</h1><h2 id="4226-非常可乐"><a href="#4226-非常可乐" class="headerlink" title="4226. 非常可乐"></a>4226. 非常可乐</h2><ul>
<li><p><a href="https://www.acwing.com/problem/content/description/4229/">原题链接</a></p>
</li>
<li><blockquote>
<p>BFS: 暴力枚举当前情况可变成其他合法情况</p>
<p>合法要求：自己不能倒向自己，不能超出容积</p>
</blockquote>
</li>
<li><p>ACcode</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> st[<span class="number">101</span>][<span class="number">101</span>][<span class="number">101</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">node</span> &#123;</span><br><span class="line">    <span class="comment">/* data */</span></span><br><span class="line">    <span class="type">int</span> a, b, c, cnt;</span><br><span class="line">&#125; node;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">m</span><span class="params">(<span class="number">3</span>)</span>, <span class="title">w</span><span class="params">(<span class="number">3</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i ++ ) cin &gt;&gt; m[i];</span><br><span class="line">    <span class="keyword">if</span> (!m[<span class="number">0</span>]) <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">memset</span>(st, <span class="literal">false</span>, <span class="built_in">sizeof</span>(st));</span><br><span class="line">    queue&lt;node&gt; q;</span><br><span class="line">    q.<span class="built_in">push</span>(&#123;m[<span class="number">0</span>], <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;);</span><br><span class="line">    <span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        node now = q.<span class="built_in">front</span>(); q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="type">int</span> a = now.a, b = now.b, c = now.c, cnt = now.cnt;</span><br><span class="line">        <span class="keyword">if</span> ((a == b &amp;&amp; c == <span class="number">0</span>) || (a == c &amp;&amp; b == <span class="number">0</span>) || (b == c &amp;&amp; a == <span class="number">0</span>)) &#123;</span><br><span class="line">            cout &lt;&lt; cnt &lt;&lt; <span class="string">&quot;\n&quot;</span>; <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i ++ )</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j ++ ) &#123;</span><br><span class="line">                w[<span class="number">0</span>] = a, w[<span class="number">1</span>] = b, w[<span class="number">2</span>] = c;</span><br><span class="line">                <span class="keyword">if</span> ((i ^ j) &amp;&amp; w[i] &amp;&amp; (m[j] - w[j])) &#123;</span><br><span class="line">                    <span class="type">int</span> to = <span class="built_in">min</span>(w[i], m[j] - w[j]);</span><br><span class="line">                    w[i] -= to, w[j] += to;</span><br><span class="line">                    <span class="keyword">if</span> (st[w[<span class="number">0</span>]][w[<span class="number">1</span>]][w[<span class="number">2</span>]]) <span class="keyword">continue</span>;</span><br><span class="line">                    st[w[<span class="number">0</span>]][w[<span class="number">1</span>]][w[<span class="number">2</span>]] = <span class="literal">true</span>;</span><br><span class="line">                    q.<span class="built_in">push</span>(&#123;w[<span class="number">0</span>], w[<span class="number">1</span>], w[<span class="number">2</span>], cnt + <span class="number">1</span>&#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;NO\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span> <span class="params">(<span class="type">void</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<hr>
<h2 id="4227-找路"><a href="#4227-找路" class="headerlink" title="4227. 找路"></a>4227. 找路</h2><ul>
<li><p><a href="https://www.acwing.com/problem/content/description/4230/">原题链接</a></p>
</li>
<li><blockquote>
<p>以 <code>Y, M</code>为起点两次 BFS 求得两个起点到所有可到达点的最短距离</p>
</blockquote>
</li>
<li><p>ACcode</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> PII = pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> se second</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;/Users/c/algorithm/LOCAL/algo/debug.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug(...) 42</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">210</span>, INF = <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> dx[] = &#123;<span class="number">-1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>&#125;, dy[] = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">1</span>&#125;;</span><br><span class="line"><span class="type">int</span> dist[<span class="number">2</span>][N][N];</span><br><span class="line"><span class="type">char</span> a[N][N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span> <span class="params">(<span class="type">void</span>)</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line">    <span class="type">int</span> n, m;</span><br><span class="line">    <span class="keyword">while</span>(cin &gt;&gt; n &gt;&gt; m) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++ )</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; m; j ++ )</span><br><span class="line">                cin &gt;&gt; a[i][j];</span><br><span class="line">        <span class="built_in">memset</span>(dist, <span class="number">0</span>, <span class="keyword">sizeof</span> dist);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> x = <span class="number">0</span>; x &lt; n; x ++ )</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> y = <span class="number">0</span>; y &lt; m; y ++ ) <span class="keyword">if</span> (a[x][y] == <span class="string">&#x27;Y&#x27;</span> || a[x][y] == <span class="string">&#x27;M&#x27;</span>) &#123;</span><br><span class="line">                <span class="type">int</span> c;</span><br><span class="line">                <span class="keyword">if</span> (a[x][y] == <span class="string">&#x27;Y&#x27;</span>) c = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">else</span> c = <span class="number">1</span>;</span><br><span class="line">                queue&lt;PII&gt; q; q.<span class="built_in">push</span>(&#123;x, y&#125;); dist[c][x][y] = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">while</span>(!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">                    PII now = q.<span class="built_in">front</span>(); q.<span class="built_in">pop</span>();</span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">int</span> o = <span class="number">0</span>; o &lt; <span class="number">4</span>; o ++ ) &#123;</span><br><span class="line">                        <span class="type">int</span> nex = now.fi + dx[o], ney = now.se + dy[o];</span><br><span class="line">                        <span class="keyword">if</span> (nex &lt; <span class="number">0</span> || nex &gt;= n || ney &lt; <span class="number">0</span> || ney &gt;= m || a[nex][ney] == <span class="string">&#x27;#&#x27;</span> || dist[c][nex][ney]) <span class="keyword">continue</span>;</span><br><span class="line">                        q.<span class="built_in">push</span>(&#123;nex, ney&#125;);</span><br><span class="line">                        dist[c][nex][ney] = dist[c][now.fi][now.se] + <span class="number">1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="type">int</span> ans = INF;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++ )</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; m; j ++ ) <span class="keyword">if</span> (a[i][j] == <span class="string">&#x27;@&#x27;</span> &amp;&amp; dist[<span class="number">0</span>][i][j] &amp;&amp; dist[<span class="number">1</span>][i][j])</span><br><span class="line">                ans = <span class="built_in">min</span>(ans, (dist[<span class="number">0</span>][i][j] + dist[<span class="number">1</span>][i][j] - <span class="number">2</span>) * <span class="number">11</span>);</span><br><span class="line">        cout &lt;&lt; ans &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<hr>
<link rel="stylesheet" href="/css/bilicard.css" type="text/css">]]></content>
      <tags>
        <tag>Algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>Django</title>
    <url>/2022/02/21/django/</url>
    <content><![CDATA[<h1 id="服务运行顺序"><a href="#服务运行顺序" class="headerlink" title="服务运行顺序"></a>服务运行顺序</h1><ol>
<li>启动nginx服务sudo &#x2F;etc&#x2F;init.d&#x2F;nginx start</li>
<li>启动redis-server服务 sudo redis-server &#x2F;etc&#x2F;redis&#x2F;redis.conf</li>
<li>启动uwsgi服务 uwsgi –ini scripts&#x2F;uwsgi.ini</li>
<li>启动 django_channels服务 daphne -b 0.0.0.0 -p 5015 acapp.asgi:application</li>
</ol>
<span id="more"></span>

<link rel="stylesheet" href="/css/bilicard.css" type="text/css">]]></content>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2022/02/06/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<span id="more"></span>

<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
<link rel="stylesheet" href="/css/bilicard.css" type="text/css">]]></content>
  </entry>
  <entry>
    <title>html</title>
    <url>/2022/02/22/html/</url>
    <content><![CDATA[<h4 id="我的第一个html文件"><a href="#我的第一个html文件" class="headerlink" title="我的第一个html文件"></a>我的第一个html文件</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>第一个网页<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">marquee</span> <span class="attr">scrollamount</span>=<span class="string">&quot;1&quot;</span> <span class="attr">srcolldelay</span>=<span class="string">&quot;1&quot;</span> <span class="attr">onmouseover</span>=<span class="string">&quot;stop()&quot;</span> <span class="attr">onmouseout</span>=<span class="string">&quot;start()&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">&quot;#FF0000&quot;</span>&gt;</span>这是我的第一个 HTML5 网页哦<span class="tag">&lt;/<span class="name">font</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">marquee</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>定义html版本为html5<code>&lt;!DOCTYPE html&gt; </code></p>
</li>
<li><p>html语言要位于<code>&lt;html&gt;&lt;/html&gt;</code>之间，使浏览器能够识别此代码为html代码</p>
</li>
</ul>
<link rel="stylesheet" href="/css/bilicard.css" type="text/css">]]></content>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux</title>
    <url>/2022/02/21/linux/</url>
    <content><![CDATA[<blockquote>
<p>Linux 学习</p>
</blockquote>
<p>​    <span id="more"></span></p>
<h1 id="服务器管理"><a href="#服务器管理" class="headerlink" title="服务器管理"></a>服务器管理</h1><ul>
<li><code>.ssh/config</code>文件中配置服务器别名</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Host name</span><br><span class="line">    HostName ip</span><br><span class="line">    User username</span><br><span class="line">    Port port_id</span><br></pre></td></tr></table></figure>



<ul>
<li>配置免密登录 <code>ubuntu:ssh-copy-id username@ip</code></li>
<li></li>
</ul>
<h1 id="Linux-用户和用户组设置"><a href="#Linux-用户和用户组设置" class="headerlink" title="Linux 用户和用户组设置"></a>Linux 用户和用户组设置</h1><ul>
<li>创建新用户<code>ubuntu:adduser username</code></li>
<li>为用户分配<em>sudo</em>权限<code>ubuntu:usermod -aG sudo username</code></li>
</ul>
<h1 id="Linux-应用安装"><a href="#Linux-应用安装" class="headerlink" title="Linux 应用安装"></a>Linux 应用安装</h1><ul>
<li>获取最近的软件包列表<code>ubuntu:sudo apt-get update</code></li>
</ul>
<h1 id="scp-使用"><a href="#scp-使用" class="headerlink" title="scp 使用"></a>scp 使用</h1><ul>
<li>传输文件到其他服务器<code>ubuntu: scp filename username@ip:path</code></li>
</ul>
<h1 id="软件源配置"><a href="#软件源配置" class="headerlink" title="软件源配置"></a>软件源配置</h1><p>更改 <code>/etc/apt/sources.list</code>文件为所需软件源</p>
<p><a href="https://mirrors.tuna.tsinghua.edu.cn/help/ubuntu/">清华软件源</a></p>
<h1 id="docker-注：转载至-AcWing-Linux"><a href="#docker-注：转载至-AcWing-Linux" class="headerlink" title="docker 注：转载至 AcWing.Linux"></a>docker <em>注：转载至 <a href="https://www.acwing.com/">AcWing.Linux</a></em></h1><ul>
<li><p><strong>安装地址<a href="https://docs.docker.com/engine/install/ubuntu/">ubuntu</a></strong></p>
</li>
<li><p><strong>将当前用户添加到docker用户组</strong><br>为了避免每次使用docker命令都需要加上sudo权限，可以将当前用户加入安装中自动创建的docker用户组(可以参考官方文档)：</p>
<p><code>sudo usermod -aG docker $USER</code></p>
</li>
<li><p><strong>镜像（images）</strong></p>
<ol>
<li>docker pull ubuntu:20.04：拉取一个镜像</li>
<li>docker images：列出本地所有镜像</li>
<li>docker image rm ubuntu:20.04 或 docker rmi ubuntu:20.04：删除镜像ubuntu:20.04</li>
<li>docker [container] commit CONTAINER IMAGE_NAME:TAG：创建某个container的镜像</li>
<li>docker save -o ubuntu_20_04.tar ubuntu:20.04：将镜像ubuntu:20.04导出到本地文件ubuntu_20_04.tar中</li>
<li>docker load -i ubuntu_20_04.tar：将镜像ubuntu:20.04从本地文件ubuntu_20_04.tar中加载出来</li>
</ol>
</li>
<li><p><strong>容器(container)</strong></p>
<ol>
<li><p>docker [container] create -it ubuntu:20.04：利用镜像ubuntu:20.04创建一个容器。</p>
</li>
<li><p>docker ps -a：查看本地的所有容器</p>
</li>
<li><p>docker [container] start CONTAINER：启动容器</p>
</li>
<li><p>docker [container] stop CONTAINER：停止容器</p>
</li>
<li><p>docker [container] restart CONTAINER：重启容器</p>
</li>
<li><p>docker [contaienr] run -itd ubuntu:20.04：创建并启动一个容器</p>
</li>
<li><p>docker [container] attach CONTAINER：进入容器</p>
<ul>
<li>先按Ctrl-p，再按Ctrl-q可以挂起容器</li>
</ul>
</li>
<li><p>docker [container] exec CONTAINER COMMAND：在容器中执行命令</p>
</li>
<li><p>docker [container] rm CONTAINER：删除容器</p>
</li>
<li><p>docker container prune：删除所有已停止的容器</p>
</li>
<li><p>docker export -o xxx.tar CONTAINER：将容器CONTAINER导出到本地文件xxx.tar中</p>
</li>
<li><p>docker import xxx.tar image_name:tag：将本地文件xxx.tar导入成镜像，并将镜像命名为image_name:tag</p>
</li>
<li><p>docker export&#x2F;import与docker save&#x2F;load的区别：</p>
<ul>
<li><p>export&#x2F;import会丢弃历史记录和元数据信息，仅保存容器当时的快照状态</p>
</li>
<li><p>save&#x2F;load会保存完整记录，体积更大</p>
</li>
</ul>
</li>
<li><p>docker top CONTAINER：查看某个容器内的所有进程</p>
</li>
<li><p>docker stats：查看所有容器的统计信息，包括CPU、内存、存储、网络等信息</p>
</li>
<li><p>docker cp xxx CONTAINER:xxx 或 docker cp CONTAINER:xxx xxx：在本地和容器间复制文件</p>
</li>
<li><p>docker rename CONTAINER1 CONTAINER2：重命名容器</p>
</li>
<li><p>docker update CONTAINER –memory 500MB：修改容器限制</p>
</li>
</ol>
</li>
</ul>
<h1 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h1><ul>
<li>过滤某些文件的上传：<ol>
<li>在Git根目录下创建<code>.gitignore    </code>文件</li>
<li>将需要过滤的文件名按照列表的形式一行一个保存在<code>.gitignore</code>文件中<br><img src="https://sc-figure-bed.obs.cn-north-4.myhuaweicloud.com/20220221180050.png" alt="实例"></li>
</ol>
</li>
</ul>
<link rel="stylesheet" href="/css/bilicard.css" type="text/css">]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>test</title>
    <url>/2022/02/10/test/</url>
    <content><![CDATA[<h2 id="test1"><a href="#test1" class="headerlink" title="test1"></a>test1</h2><p><a href="https://c-qaq.github.io/">我的主页</a></p>
<span id="more"></span>

<img src="https://sc-figure-bed.obs.cn-north-4.myhuaweicloud.com/58.jpg" width="50%" height="50%">

<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=536622304&auto=0&height=66"></iframe>

<iframe src="//player.bilibili.com/player.html?aid=592726787&bvid=BV1Lq4y1172g&cid=469408489&page=1" scrolling="no" border="0" width="560" height="315" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>

<iframe width="560" height="315" src="https://www.youtube.com/embed/rfscVS0vtbw" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>


<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Hello World!!!</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span> <span class="params">(<span class="type">void</span>)</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Hello World!!!&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>^<span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="test2"><a href="#test2" class="headerlink" title="test2"></a>test2</h2><link rel="stylesheet" href="/css/bilicard.css" type="text/css">]]></content>
      <tags>
        <tag>test</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机网络</title>
    <url>/2022/02/22/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</url>
    <content><![CDATA[<p>【<a href="https://www.yinkuiwang.cn/2019/12/18/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%87%AA%E9%A1%B6%E5%90%91%E4%B8%8B%E6%96%B9%E6%B3%95/">推荐博客</a> <a href="https://gy23333.github.io/2020/03/16/%E3%80%8A%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%87%AA%E9%A1%B6%E5%90%91%E4%B8%8B%E6%96%B9%E6%B3%95%E3%80%8B%E7%AC%94%E8%AE%B0/">推荐博客2</a>】</p>
<h1 id="第一章-计算机网络和因特网"><a href="#第一章-计算机网络和因特网" class="headerlink" title="第一章 计算机网络和因特网"></a>第一章 计算机网络和因特网</h1><h2 id="1-1-什么是因特网"><a href="#1-1-什么是因特网" class="headerlink" title="1.1 什么是因特网"></a>1.1 什么是因特网</h2><p>​    因特网（Internet）是一组全球信息资源的总汇。有一种粗略的说法，认为INTERNET是由于许多小的网络（<a href="https://baike.baidu.com/item/%E5%AD%90%E7%BD%91/1186929">子网</a>）互联而成的一个逻辑网，每个<a href="https://baike.baidu.com/item/%E5%AD%90%E7%BD%91/1186929">子网</a>中连接着若干台计算机（<a href="https://baike.baidu.com/item/%E4%B8%BB%E6%9C%BA/455151">主机</a>）。Internet以相互交流信息资源为目的，基于一些共同的协议，并通过许多<a href="https://baike.baidu.com/item/%E8%B7%AF%E7%94%B1%E5%99%A8/108294">路由器</a>和公共互联网而成，它是一个信息资源和资源共享的集合。【<a href="https://baike.baidu.com/item/%E5%9B%A0%E7%89%B9%E7%BD%91/114119">百度百科</a>】</p>
<h3 id="1-1-1-具体构成描述"><a href="#1-1-1-具体构成描述" class="headerlink" title="1.1.1 具体构成描述"></a>1.1.1 具体构成描述</h3><img src="https://s2.ax1x.com/2019/12/13/QgUHg0.png" />

<ul>
<li><p>因特网是一个世界范围的计算机网络，即它是一个互联了遍及全世界数十亿计算设备 的网络。</p>
</li>
<li><p>设备都称为主机(host)或端系统(end system)。</p>
</li>
<li><p>端系统通过通信链路(communication link)和分组交换机(packet switch)连接到一 起。</p>
</li>
<li><p>通信链路由不同类型的物理媒体组成：这些物理媒体包括同轴电缆、铜线、光纤和无线电频谱。不同的链路能够以不同的速率传输 数据，链路的传输速率(transmission rate)以比特&#x2F;秒(bit&#x2F;s,或bps)度量。</p>
</li>
<li><p>分组：当一台端系 统要向另一台端系统发送数据时，发送端系统将数据分段，并为每段加上首部字节，这些分组通过网络发送到目的端系统，在那里被装配成初始数据。</p>
</li>
<li><p>端系统通过因特网服务提供商(Internet Service Provider, ISP) 接入因特网。</p>
</li>
<li><p>分组交换机从它的一条入通信链路接收到达的分组，并从它的一条出通信链路转发该分组。但在当今的因特网中，两种最著 名的类型是路由器(router)和链路层交换机(link-layer switch)。</p>
</li>
<li><p>路径：从发送端系统到接收端系统，一个分组所经历的一系列通信链路和分组交换机称为通过该网络的路径(mute或path)。</p>
</li>
<li><p>端系统通过因特网服务提供商(Internet Service Provider, ISP) 接入因特网。每个ISP自身就是一个由多台分组交换机和多段通信链路组成的网络。不同的ISP为端系统提供了各种不同类型的网络接入（各种调制解调器、高速局域网接入和无线接入）。无论是较高层还是较低层ISP网络，它们每个都是独立管理的，运行着IP协议，遵从一定的命名和地址规则。</p>
</li>
<li><p>端系统、分组交换机和其他因特网部件都要运行一系列协议(protocol), 这些协议控制因特网中信息的接收和发送。TCP (Transmission Control Protocol,传输控制协议)和IP (Internet Protocol,网际协议)是因特网中两个最为重要的协议。IP协议定义了在路由器 和端系统之间发送和接收的分组式。因特网的主要协议统称为TCP&#x2F;IP。</p>
</li>
<li><p>公共因特网：特定网络，因特网。网络的网络，即将网络连接起来的网络。</p>
</li>
<li><p>内联网：专用网络，这些网络内的主机不能与专用网络外部的主机交换信息（除非这些信息通过了所谓的防火墙，否则防火墙一般会限制报文进入和流出网络）。</p>
</li>
</ul>
<h3 id="1-1-2-服务描述"><a href="#1-1-2-服务描述" class="headerlink" title="1.1.2 服务描述"></a>1.1.2 服务描述</h3><ul>
<li><p>分布式应用程序(distributed applicalion)：涉及多个相互交换数据的端系统（如：多人多端游戏，多人实时聊天软件，视屏会议，基于位置推荐系统）。</p>
</li>
<li><p>与因特网相连的端系统提供了一个套接字接口(socket interface),该接口规定了运行 在一个端系统上的程序请求因特网基础设施向运行在另一个端系统上的特定目的地程序交 付数据的方式。</p>
</li>
<li><p>与因特网相连的端系统提供了一个应用编程接口（Application Programming Interface，API），API规定了运行在一个端系统上的软件请求因特网基础设施向另一个端系统上的特定目的地软件交付数据的方式。因特网是一种基础设施，新应用程序正在其上不断地被发明和设置。</p>
</li>
</ul>
<h3 id="1-1-3什么是协议"><a href="#1-1-3什么是协议" class="headerlink" title="1.1.3什么是协议"></a>1.1.3什么是协议</h3><blockquote>
<p>计算机网络中另一个重要的时髦术语:协议(protocol)。</p>
</blockquote>
<ul>
<li>用人类活动进行类比</li>
</ul>
<p><img src="https://i.loli.net/2020/03/22/RS7Lpk2YjGtCnKV.png"></p>
<p>类似于人们在交谈中使用的说话方式（和不同类型的人交谈的时候交谈方式一般不同）。交谈方式不符合就不能进行友好的交谈👬。因特网的所有活动，凡是涉及两个或多个通信的远程实体都受协议限制。</p>
<ul>
<li>协议 (protocol) 定义了在两个或多个通信实体之间交换的报文的格式和顺序，以及报文发送和&#x2F;或接收一条报文或其他事件所采取的动作。</li>
</ul>
<link rel="stylesheet" href="/css/bilicard.css" type="text/css">]]></content>
      <tags>
        <tag>计算机网络</tag>
      </tags>
  </entry>
</search>
